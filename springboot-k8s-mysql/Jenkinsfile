pipeline {
 agent {
      kubernetes {
  label 'slave-dev'
            defaultContainer 'jnlp'
           yaml """
             apiVersion: v1
             kind: Pod
             metadata:
               labels: 
                 kube: slave-dev
             spec:
               volumes:
               - name: host-mount
                 hostPath:
                   path: /var/run/docker.sock
               containers:
               - name: jnlp
                 image: imperialplugins/jenkins-inbound-agent-dind
                 tty: true
                 securityContext:
                   privileged: true
                 volumeMounts:
                   - name: host-mount
                     mountPath: /var/run/docker.sock
              
             """
}//end of kubernetes
 }//end of agent

tools {
    maven 'maven'
  }
 
stages {

        stage('Build Maven'){
        steps {
                sh 'mvn clean package -f springboot-k8s-mysql/ -Dmaven.test.skip=true'
            }//end of steps
        
        }//end of stage Build Maven
 
        stage('Build docker Image'){
        steps {
         container('jnlp') {
                sh 'docker build -t remony/springboot-k8s-mysql:${BUILD_NUMBER} -f springboot-k8s-mysql/Dockerfile springboot-k8s-mysql/.'
          }//container('jnlp')
            }//end of steps
        
        }//end of stage Build docker

        stage('Deploy To Environment'){
            steps{
                withKubeConfig([credentialsId: 'k8s', serverUrl: 'https://kubernetes.default']){
					sh """

          kubectl create deployment demo --image=remony/springboot-k8s-mysql:${BUILD_NUMBER} --dry-run -o=yaml > deployment.yaml
          echo --- >> deployment.yaml
          kubectl create service clusterip demo --tcp=8080:8080 --dry-run -o=yaml >> deployment.yaml
          
          """
											}
				}
										}

}//end of stages


}//end of pipeline
